const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'db', 'reviews.db');
const db = new sqlite3.Database(dbPath);

console.log('üóÑÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
function runQuery(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥
function runCommand(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function(err) {
      if (err) {
        reject(err);
      } else {
        resolve({ changes: this.changes, lastID: this.lastID });
      }
    });
  });
}

async function showStats() {
  try {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:');
    
    const total = await runQuery('SELECT COUNT(*) as count FROM reviews');
    const approved = await runQuery('SELECT COUNT(*) as count FROM reviews WHERE status = "approved"');
    const pending = await runQuery('SELECT COUNT(*) as count FROM reviews WHERE status = "pending"');
    const rejected = await runQuery('SELECT COUNT(*) as count FROM reviews WHERE status = "rejected"');
    
    console.log(`   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${total[0].count}`);
    console.log(`   ‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: ${approved[0].count}`);
    console.log(`   ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${pending[0].count}`);
    console.log(`   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: ${rejected[0].count}\n`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

async function showAllReviews() {
  try {
    console.log('üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:');
    const reviews = await runQuery(`
      SELECT id, status, text, rating, created_at, first_name, username 
      FROM reviews 
      ORDER BY id DESC
    `);
    
    reviews.forEach(review => {
      const status = review.status === 'approved' ? '‚úÖ' : 
                    review.status === 'pending' ? '‚è≥' : '‚ùå';
      const author = review.first_name || review.username || '–ê–Ω–æ–Ω–∏–º';
      console.log(`   ${status} ID:${review.id} | ${author} | ${review.rating}/5 | ${review.text.substring(0, 50)}...`);
    });
    console.log('');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
  }
}

async function deleteReview(id) {
  try {
    const result = await runCommand('DELETE FROM reviews WHERE id = ?', [id]);
    if (result.changes > 0) {
      console.log(`‚úÖ –û—Ç–∑—ã–≤ ${id} —É–¥–∞–ª–µ–Ω`);
    } else {
      console.log(`‚ùå –û—Ç–∑—ã–≤ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
  }
}

async function deleteAllReviews() {
  try {
    const result = await runCommand('DELETE FROM reviews');
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.changes} –æ—Ç–∑—ã–≤–æ–≤`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤:', error);
  }
}

async function deleteByStatus(status) {
  try {
    const result = await runCommand('DELETE FROM reviews WHERE status = ?', [status]);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.changes} –æ—Ç–∑—ã–≤–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}"`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

async function main() {
  switch (command) {
    case 'stats':
      await showStats();
      break;
      
    case 'list':
      await showAllReviews();
      break;
      
    case 'delete':
      const id = args[1];
      if (id) {
        await deleteReview(id);
      } else {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        console.log('   –ü—Ä–∏–º–µ—Ä: node db-manager.js delete 5');
      }
      break;
      
    case 'delete-all':
      console.log('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç–∑—ã–≤—ã? (y/N)');
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
      console.log('   –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node db-manager.js delete-all-confirm');
      break;
      
    case 'delete-all-confirm':
      await deleteAllReviews();
      break;
      
    case 'delete-pending':
      await deleteByStatus('pending');
      break;
      
    case 'delete-rejected':
      await deleteByStatus('rejected');
      break;
      
    default:
      console.log('üóÑÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤\n');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      console.log('   node db-manager.js stats              - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      console.log('   node db-manager.js list               - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã');
      console.log('   node db-manager.js delete <id>        - —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ ID');
      console.log('   node db-manager.js delete-pending     - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      console.log('   node db-manager.js delete-rejected    - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã');
      console.log('   node db-manager.js delete-all-confirm - —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç–∑—ã–≤—ã');
      console.log('\nüìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ' + dbPath);
      break;
  }
  
  db.close();
}

main().catch(console.error);

