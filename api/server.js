const http = require('http');
const url = require('url');
const { getReviewsByStatus } = require('./reviews');
const { validatePromoCode, usePromoCode, getAllPromoCodes, getPromoCodesStats } = require('./promo-codes');

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
  'Content-Type': 'application/json'
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å–∞–π—Ç–∞
async function getPublishedReviews() {
  try {
    const reviews = await getReviewsByStatus('approved');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedReviews = reviews.map(review => ({
      id: review.id,
      author: review.first_name || review.username || '–ê–Ω–æ–Ω–∏–º',
      text: review.text,
      rating: review.rating,
      date: review.created_at,
      stars: Math.floor(review.rating),
      is_student: review.is_student || false
    }));
    
    return {
      success: true,
      data: formattedReviews
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤'
    };
  }
}

const server = http.createServer(async (req, res) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS headers
  Object.entries(corsHeaders).forEach(([key, value]) => {
    res.setHeader(key, value);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  const parsedUrl = url.parse(req.url, true);
  const pathname = parsedUrl.pathname;

  console.log(`üì° API –∑–∞–ø—Ä–æ—Å: ${req.method} ${pathname}`);

  try {
    if (pathname === '/api/reviews' && req.method === 'GET') {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...');
      const result = await getPublishedReviews();
      
      res.writeHead(200);
      res.end(JSON.stringify(result));
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.data?.length || 0} –æ—Ç–∑—ã–≤–æ–≤`);
      
    } else if (pathname === '/api/stats' && req.method === 'GET') {
      const stats = {
        success: true,
        data: {
          total: 0,
          approved: 0,
          pending: 0
        }
      };
      
      res.writeHead(200);
      res.end(JSON.stringify(stats));
      
    } else if (pathname === '/api/promo/validate' && req.method === 'POST') {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      let body = '';
      req.on('data', chunk => {
        body += chunk.toString();
      });
      
      req.on('end', async () => {
        try {
          const { code, price } = JSON.parse(body);
          
          if (!code) {
            res.writeHead(400);
            res.end(JSON.stringify({ success: false, reason: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω' }));
            return;
          }
          
          if (!price || price <= 0) {
            res.writeHead(400);
            res.end(JSON.stringify({ success: false, reason: '–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞' }));
            return;
          }
          
          const validation = await validatePromoCode(code);
          
          if (validation.valid) {
            res.writeHead(200);
            res.end(JSON.stringify({
              success: true,
              discountPercent: validation.promoCode.discount_percent,
              maxUses: validation.promoCode.max_uses,
              usedCount: validation.promoCode.used_count,
              description: validation.promoCode.description
            }));
          } else {
            res.writeHead(200);
            res.end(JSON.stringify({
              success: false,
              reason: validation.reason
            }));
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
          res.writeHead(500);
          res.end(JSON.stringify({ success: false, reason: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        }
      });
      
    } else if (pathname === '/api/promo/use' && req.method === 'POST') {
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
      let body = '';
      req.on('data', chunk => {
        body += chunk.toString();
      });
      
      req.on('end', async () => {
        try {
          const { code, userId, userUsername, originalPrice } = JSON.parse(body);
          
          if (!code || !userId || !originalPrice) {
            res.writeHead(400);
            res.end(JSON.stringify({ success: false, reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' }));
            return;
          }
          
          const result = await usePromoCode(code, userId, userUsername, originalPrice);
          
          if (result.success) {
            res.writeHead(200);
            res.end(JSON.stringify({
              success: true,
              discountPercent: result.discountPercent,
              discountAmount: result.discountAmount,
              finalPrice: result.finalPrice,
              usageId: result.usageId
            }));
          } else {
            res.writeHead(200);
            res.end(JSON.stringify({
              success: false,
              reason: result.reason
            }));
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
          res.writeHead(500);
          res.end(JSON.stringify({ success: false, reason: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        }
      });
      
    } else if (pathname === '/api/lead' && req.method === 'POST') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫—É—Ä—Å–µ
      let body = '';
      req.on('data', chunk => {
        body += chunk.toString();
      });
      
      req.on('end', async () => {
        try {
          const data = JSON.parse(body);
          console.log('üìù –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', data);
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
          const formatText = data.format === 'group' ? '–ì—Ä—É–ø–ø–æ–≤—ã–µ' : 
                            data.format === 'individual' ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ' : '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ';
          const levelText = data.level === 'hsk1' ? 'HSK 1' :
                           data.level === 'hsk2' ? 'HSK 2' :
                           data.level === 'hsk3' ? 'HSK 3' :
                           data.level === 'hsk4' ? 'HSK 4' :
                           data.level === 'hsk5' ? 'HSK 5' :
                           data.level === 'hsk6' ? 'HSK 6' : '–ù–µ —É–∫–∞–∑–∞–Ω';
          
          const text = [
            'üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫!',
            '',
            'üë§ –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:',
            `–ò–º—è: ${data.name}`,
            `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}`,
            `–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: Telegram`,
            ''
          ];
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          if (data.courseInfo) {
            text.push('üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–°–ï:');
            text.push(data.courseInfo);
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            text.push('üìö –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–°–ï:');
            text.push(`–§–æ—Ä–º–∞—Ç: ${formatText}`);
            text.push(`–£—Ä–æ–≤–µ–Ω—å: ${levelText}`);
            text.push('');
            text.push('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤—Ä–µ–º—è
          text.push('');
          if (data.comment) {
            text.push(`üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}`);
          }
          
          text.push('');
          text.push(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
          
          const finalText = text.filter(Boolean).join('\n');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram-dev.js)
          const { sendToTelegramDev } = require('./telegram-dev');
          const telegramResult = await sendToTelegramDev(finalText);
          
          console.log('üì§ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram:', telegramResult);
          
          res.writeHead(200);
          res.end(JSON.stringify({ success: true }));
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
          res.writeHead(500);
          res.end(JSON.stringify({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        }
      });
      
    } else {
      res.writeHead(404);
      res.end(JSON.stringify({ success: false, error: 'Not Found' }));
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.writeHead(500);
    res.end(JSON.stringify({ success: false, error: 'Internal Server Error' }));
  }
});

const PORT = process.env.PORT || 3001;

server.listen(PORT, () => {
  console.log(`üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° Endpoints:`);
  console.log(`   GET http://localhost:${PORT}/api/reviews - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã`);
  console.log(`   GET http://localhost:${PORT}/api/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
  console.log(`   POST http://localhost:${PORT}/api/promo/validate - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞`);
  console.log(`   POST http://localhost:${PORT}/api/promo/use - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞`);
  console.log(`   POST http://localhost:${PORT}/api/lead - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
});

process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

