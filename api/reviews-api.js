const { 
  createReview, 
  getReviewsByStatus, 
  getReviewsForAdmin, 
  updateReviewStatus, 
  getReviewById,
  getReviewsStats 
} = require('./reviews');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å–∞–π—Ç–∞
async function getPublishedReviews(req, res) {
  try {
    const reviews = await getReviewsByStatus('approved');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedReviews = reviews.map(review => ({
      id: review.id,
      author: review.first_name || review.username || '–ê–Ω–æ–Ω–∏–º',
      text: review.text,
      rating: review.rating,
      date: review.created_at,
      stars: Math.floor(review.rating),
      is_student: review.is_student || false
    }));
    
    res.json({
      success: true,
      data: formattedReviews
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤'
    });
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ (–¥–ª—è Telegram –±–æ—Ç–∞)
async function createNewReview(req, res) {
  try {
    const { 
      user_id, 
      username, 
      first_name, 
      last_name, 
      language_code,
      is_bot,
      is_premium,
      phone_number,
      country_code,
      city,
      timezone,
      text, 
      rating,
      user_agent,
      ip_address,
      referrer,
      is_student
    } = req.body;
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –≤–µ–±-—Å–∞–π—Ç–∞
    const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];
    const clientUserAgent = req.headers['user-agent'] || 'Unknown';
    const clientReferrer = req.headers.referer || req.headers.referrer || 'Direct';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ IP (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const getCountryByIP = (ip) => {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GeoIP API
      if (ip && ip.startsWith('192.168.') || ip.startsWith('127.') || ip.startsWith('10.')) {
        return 'LOCAL';
      }
      return 'UNKNOWN';
    };
    
    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const fullReviewData = {
      user_id,
      username: username || null,
      first_name: first_name || null,
      last_name: last_name || null,
      language_code: language_code || req.headers['accept-language']?.split(',')[0] || 'en',
      is_bot: is_bot || false,
      is_premium: is_premium || false,
      phone_number: phone_number || null,
      country_code: country_code || getCountryByIP(clientIP),
      city: city || null,
      timezone: timezone || null,
      text,
      rating,
      user_agent: user_agent || clientUserAgent,
      ip_address: ip_address || clientIP,
      referrer: referrer || clientReferrer,
      is_student: is_student || false
    };
    
    console.log('üìä –°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –≤–µ–±-—Å–∞–π—Ç–∞:', {
      user_id: fullReviewData.user_id,
      ip: fullReviewData.ip_address,
      country: fullReviewData.country_code,
      language: fullReviewData.language_code,
      user_agent: fullReviewData.user_agent.substring(0, 50) + '...',
      referrer: fullReviewData.referrer
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!user_id || !text || rating === undefined) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞'
      });
    }
    
    if (rating < 1 || rating > 5) {
      return res.status(400).json({
        success: false,
        error: '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5'
      });
    }
    
    if (text.trim().length < 10) {
      return res.status(400).json({
        success: false,
        error: '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }
    
    const review = await createReview(fullReviewData);
    
    res.json({
      success: true,
      data: review,
      message: '–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞'
    });
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
async function getAdminReviews(req, res) {
  try {
    const reviews = await getReviewsForAdmin();
    
    res.json({
      success: true,
      data: reviews
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤'
    });
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async function updateReview(req, res) {
  try {
    console.log('üìù Update review request:', {
      params: req.params,
      body: req.body,
      query: req.query
    });
    
    const { reviewId, status, adminId, adminUsername } = { 
      ...req.body, 
      reviewId: req.body.reviewId || req.params.id 
    };
    
    console.log('üìù Parsed data:', { reviewId, status, adminId, adminUsername });
    
    if (!reviewId || !status) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
      });
    }
    
    if (!['approved', 'rejected'].includes(status)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å'
      });
    }
    
    const result = await updateReviewStatus(reviewId, status, adminId, adminUsername);
    
    res.json({
      success: true,
      data: result,
      message: `–û—Ç–∑—ã–≤ ${status === 'approved' ? '–æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}`
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞'
    });
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
async function getStats(req, res) {
  try {
    const stats = await getReviewsStats();
    
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
}

module.exports = {
  getPublishedReviews,
  createNewReview,
  getAdminReviews,
  updateReview,
  getStats
};
